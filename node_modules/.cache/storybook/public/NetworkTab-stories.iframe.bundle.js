"use strict";
(self["webpackChunktask"] = self["webpackChunktask"] || []).push([["NetworkTab-stories"],{

/***/ "./components/NetworkTab.jsx":
/*!***********************************!*\
  !*** ./components/NetworkTab.jsx ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NetworkTab: () => (/* binding */ NetworkTab)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/data */ "./utils/data.js");
/* harmony import */ var react_icons_io__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-icons/io */ "./node_modules/react-icons/io/index.esm.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");





const NetworkTab = ({
  variant
}) => {
  const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const [selectedChain, setSelectedChain] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const getActiveChain = id => {
    //updateActive network

    setSelectedChain(() => _utils_data__WEBPACK_IMPORTED_MODULE_1__.data.find(d => d.chainId === id));

    //togglenetwork

    setIsOpen(!isOpen);
  };
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    //if variant is FROM, set active network as Ethereum
    if (variant === "from") {
      setSelectedChain(() => _utils_data__WEBPACK_IMPORTED_MODULE_1__.data.find(d => d.name.toLowerCase() === "ethereum"));
    } else if (variant === "to") {
      setSelectedChain(() => _utils_data__WEBPACK_IMPORTED_MODULE_1__.data.find(d => d.name.toLowerCase() === "polygon"));
    }

    //if variant is TO, set active network as Polygon
  }, []);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("div", {
    className: "w-1/6",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("div", {
      className: "relative flex flex-col",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("button", {
        onClick: () => setIsOpen(!isOpen),
        className: " w-full p-2 items-center  flex justify-between  border-black font-bold tracking-wider border focus:border-black",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("span", {
          className: "flex items-center",
          children: [selectedChain && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
            src: selectedChain.icon,
            className: "rounded-full",
            alt: "icon",
            height: "30",
            width: "30"
          }), selectedChain?.name]
        }), !isOpen ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_icons_io__WEBPACK_IMPORTED_MODULE_3__.IoMdArrowDropdown, {}) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_icons_io__WEBPACK_IMPORTED_MODULE_3__.IoMdArrowDropup, {})]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("ul", {
        className: "border-black flex  flex-col items-center rounded-lg p-2 w-full ",
        children: isOpen && _utils_data__WEBPACK_IMPORTED_MODULE_1__.data.filter(c => c.chainId !== selectedChain.chainId).map((item, i) => {
          return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)("li", {
            onClick: () => {
              getActiveChain(item.chainId);
            },
            className: "flex w-full justify-around  hover:bg-blue-300 p-3 cursor-pointer  hover:border-l-white border-l-4",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("img", {
              src: item?.icon,
              className: "rounded-full",
              alt: "icon",
              height: "30",
              width: "30"
            }), " ", item?.name, " "]
          }, i);
        })
      })]
    })
  });
};
NetworkTab.displayName = "NetworkTab";
NetworkTab.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "NetworkTab"
};

/***/ }),

/***/ "./stories/NetworkTab.stories.js":
/*!***************************************!*\
  !*** ./stories/NetworkTab.stories.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputVariant: () => (/* binding */ InputVariant),
/* harmony export */   OutputVariant: () => (/* binding */ OutputVariant),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_NetworkTab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/NetworkTab */ "./components/NetworkTab.jsx");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: 'Bungee/NetworkTab',
  component: _components_NetworkTab__WEBPACK_IMPORTED_MODULE_0__.NetworkTab,
  args: {}
});
const InputVariant = {
  args: {
    variant: 'from'
  }
};
const OutputVariant = {
  args: {
    variant: 'to'
  }
};
InputVariant.parameters = {
  ...InputVariant.parameters,
  docs: {
    ...InputVariant.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    variant: 'from'\n  }\n}",
      ...InputVariant.parameters?.docs?.source
    }
  }
};
OutputVariant.parameters = {
  ...OutputVariant.parameters,
  docs: {
    ...OutputVariant.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    variant: 'to'\n  }\n}",
      ...OutputVariant.parameters?.docs?.source
    }
  }
};
const __namedExportsOrder = ["InputVariant", "OutputVariant"];

/***/ }),

/***/ "./utils/data.js":
/*!***********************!*\
  !*** ./utils/data.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   data: () => (/* binding */ data)
/* harmony export */ });
const data = [{
  chainId: 1,
  name: "Ethereum",
  isL1: true,
  sendingEnabled: true,
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/Ether.svg",
  receivingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: false
  },
  currency: {
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/eth.svg",
    name: "Ether",
    symbol: "ETH",
    decimals: 18,
    minNativeCurrencyForGas: "15000000000000000"
  },
  rpcs: ["https://rpc.ankr.com/eth"],
  explorers: ["https://etherscan.io"]
}, {
  chainId: 10,
  name: "Optimism",
  isL1: false,
  sendingEnabled: true,
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/Optimism.svg",
  receivingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  rpcs: ["https://mainnet.optimism.io/"],
  currency: {
    name: "Ether",
    symbol: "ETH",
    decimals: 18,
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/eth.svg",
    minNativeCurrencyForGas: "900000000000000"
  },
  explorers: ["https://optimistic.etherscan.io"]
}, {
  chainId: 56,
  name: "BSC",
  isL1: false,
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/BSC.svg",
  sendingEnabled: true,
  receivingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  currency: {
    name: "Binance Chain Native Token",
    symbol: "BNB",
    decimals: 18,
    minNativeCurrencyForGas: "1400000000000000",
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/bnb.svg"
  },
  rpcs: ["https://bsc-dataseed1.binance.org", "https://bsc-dataseed2.binance.org", "https://bsc-dataseed3.binance.org", "https://bsc-dataseed4.binance.org", "https://bsc-dataseed1.defibit.io", "https://bsc-dataseed2.defibit.io", "https://bsc-dataseed3.defibit.io", "https://bsc-dataseed4.defibit.io", "https://bsc-dataseed1.ninicoin.io", "https://bsc-dataseed2.ninicoin.io", "https://bsc-dataseed3.ninicoin.io", "https://bsc-dataseed4.ninicoin.io", "wss://bsc-ws-node.nariox.org"],
  explorers: ["https://bscscan.com"]
}, {
  chainId: 100,
  name: "Gnosis",
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/gnosis.svg",
  isL1: false,
  sendingEnabled: true,
  receivingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  currency: {
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/dai.svg",
    name: "XDAI",
    symbol: "XDAI",
    decimals: 18,
    minNativeCurrencyForGas: "2100000000000000"
  },
  rpcs: ["https://rpc.xdaichain.com", "https://xdai.poanetwork.dev", "wss://rpc.xdaichain.com/wss", "wss://xdai.poanetwork.dev/wss", "http://xdai.poanetwork.dev", "https://dai.poa.network", "ws://xdai.poanetwork.dev:8546"],
  explorers: ["https://gnosisscan.io"]
}, {
  chainId: 137,
  name: "Polygon",
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/Matic.svg",
  isL1: false,
  sendingEnabled: true,
  receivingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  currency: {
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/matic.svg",
    name: "Matic",
    symbol: "MATIC",
    decimals: 18,
    minNativeCurrencyForGas: "30000000000000000"
  },
  rpcs: ["https://rpc-mainnet.matic.network", "wss://ws-mainnet.matic.network", "https://rpc-mainnet.matic.quiknode.pro", "https://matic-mainnet.chainstacklabs.com"],
  explorers: ["https://polygonscan.com"]
}, {
  chainId: 250,
  name: "Fantom",
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/Fantom.svg",
  isL1: false,
  sendingEnabled: true,
  receivingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  rpcs: ["https://rpc.ftm.tools"],
  currency: {
    name: "Fantom",
    symbol: "FTM",
    decimals: 18,
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/ftm.svg",
    minNativeCurrencyForGas: "60000000000000000"
  },
  explorers: ["https://ftmscan.com"]
}, {
  chainId: 324,
  name: "zkSync Era",
  isL1: false,
  sendingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/zksync-era.svg",
  receivingEnabled: true,
  rpcs: ["https://mainnet.era.zksync.io"],
  currency: {
    name: "Ether",
    symbol: "ETH",
    decimals: 18,
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/eth.svg",
    minNativeCurrencyForGas: "900000000000000"
  },
  explorers: ["https://explorer.zksync.io"]
}, {
  chainId: 1101,
  name: "Polygon zkEVM",
  isL1: false,
  sendingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/zkEVM.svg",
  receivingEnabled: true,
  rpcs: ["https://zkevm-rpc.com"],
  currency: {
    name: "Ether",
    symbol: "ETH",
    decimals: 18,
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/eth.svg",
    minNativeCurrencyForGas: "900000000000000"
  },
  explorers: ["https://zkevm.polygonscan.com"]
}, {
  chainId: 42161,
  name: "Arbitrum",
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/Arbitrum.svg",
  isL1: false,
  sendingEnabled: true,
  receivingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  currency: {
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/eth.svg",
    name: "Arbitrum Ether",
    symbol: "ETH",
    decimals: 18,
    minNativeCurrencyForGas: "1400000000000000"
  },
  rpcs: ["https://arbitrum-mainnet.infura.io/v3/${INFURA_API_KEY}", "https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}", "https://arb1.arbitrum.io/rpc", "wss://arb1.arbitrum.io/ws"],
  explorers: ["https://arbiscan.io"]
}, {
  chainId: 43114,
  name: "Avalanche",
  isL1: false,
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/Avalanche.svg",
  sendingEnabled: true,
  receivingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  rpcs: ["https://api.avax-test.network/ext/bc/C/rpc"],
  currency: {
    name: "Avalanche",
    symbol: "AVAX",
    icon: "https://assets.coingecko.com/coins/images/12559/small/coin-round-red.png",
    decimals: 18,
    minNativeCurrencyForGas: "21000000000000000"
  },
  explorers: ["https://snowtrace.io"]
}, {
  chainId: 1313161554,
  name: "Aurora",
  isL1: false,
  sendingEnabled: true,
  refuel: {
    sendingEnabled: true,
    receivingEnabled: true
  },
  icon: "https://movricons.s3.ap-south-1.amazonaws.com/aurora.svg",
  receivingEnabled: true,
  rpcs: ["https://mainnet.aurora.dev"],
  currency: {
    name: "Ether",
    symbol: "ETH",
    decimals: 18,
    icon: "https://maticnetwork.github.io/polygon-token-assets/assets/eth.svg",
    minNativeCurrencyForGas: "900000000000000"
  },
  explorers: ["https://aurorascan.dev"]
}];

/***/ })

}]);
//# sourceMappingURL=NetworkTab-stories.iframe.bundle.js.map